type EventModel {
  id: ID!
  mainMedia: Media
  title: String
  description: String
  medias: [Media!]!
  owner: User!
  seats: Int
  place: Place
  sessions: [EventSession!]!
}


type Query {
  eventModelList(filter: EventModelFilter): [EventModel!]!
  eventModelDetail(id: String): EventModel
}
input EventModelFilter {
  OR: [EventModelFilter!]
  title_contains: String
  description_contains: String
}


type Mutation {
  createEventModel(eventModelInput: CreateEventModelInput!): EventModel
  updateEventModel(eventModelInput: UpdateEventModelInput!): EventModel
}
input CreateEventModelInput {
  title: String
  description: String
  seats: Int
  placeId: ID
}
input UpdateEventModelInput {
  id: ID!
  title: String
  description: String
  seats: Int
  placeId: ID
}

type Subscription {
  EventModel(filter: EventModelSubscriptionFilter): EventModelSubscriptionPayload
}
input EventModelSubscriptionFilter {
  mutation_in: [_ModelMutationType!]
}
type EventModelSubscriptionPayload {
  mutation: _ModelMutationType!
  node: EventModel
}
