type EventModel {
  id: ID!
  mainMedia: Media
  title: String
  description: String
  medias: [Media!]!
  owner: User!
  seats: Int
  bookings: Int
  start: DateTime
  end: DateTime
  tickets: [EventTicket!]!
  published: Boolean
  place: Place
}


type Query {
  eventModelList(filter: EventModelFilter): [EventModel!]!
  eventModelDetail(id: String): EventModel
}
input EventModelFilter {
  OR: [EventModelFilter!]
  title_contains: String
  description_contains: String
}


type Mutation {
  saveEventModel(eventModelInput: SaveEventModelInput!): EventModel
}
input SaveEventModelInput {
  id: ID
  title: String
  description: String
  seats: Int
  start: DateTime
  end: DateTime
  place: ID
  published: Boolean
}

type Subscription {
  EventModel(filter: EventModelSubscriptionFilter): EventModelSubscriptionPayload
}
input EventModelSubscriptionFilter {
  mutation_in: [_ModelMutationType!]
}
type EventModelSubscriptionPayload {
  mutation: _ModelMutationType!
  node: EventModel
}
