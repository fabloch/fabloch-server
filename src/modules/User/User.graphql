type User {
  id: ID!
  email: String
  jwt: String
  memberships: [Membership!]
  isAdmin: Boolean!
  profile: Profile
}

input AuthProviderNewcomerData {
    newcomer: AUTH_PROVIDER_NEWCOMER
}

input AUTH_PROVIDER_NEWCOMER {
    token: String!
    username: String!
    password: String!
}

input AUTH_PROVIDER_EMAIL {
    email: String!
    password: String!
}

type Query {
  # TODO: change for email
  user: User
}

type Mutation {
  createUser(authProvider: AuthProviderNewcomerData!): User
  signinUser(emailAuth: AUTH_PROVIDER_EMAIL): User
  updateUser(userInput: UserInput!): User
  updateProfile(profileInput: ProfileInput!): User
  # verifyUser(token: String!): User
}

input UserInput {
  username: String
  email: Email
  password: String!
  newPassword: String
}

type Profile {
  fullName: String
  intro: String
  picUrl: Url,
}
input ProfileInput {
  fullName: String
  intro: String
  picUrl: Url
}
