type EventSession {
  id: ID!
  model: EventModel
  title: String
  titleSuper: String
  intro: String
  introSuper: String
  description: String
  descriptionSuper: String
  mainMedia: Media
  medias: [Media!]!
  owner: User!
  start: DateTime
  end: DateTime
  tickets: [EventTicket!]!
  ticketCount: Int
  canTicket: CanTicket!
  seats: Int
  seatsSuper: Int
  published: Boolean
  place: Place
  placeSuper: Place
  eventCats: [EventCat!]!
  eventCatsSuper: [EventCat!]
}
type CanTicket {
  value: Boolean!
  info: String!
  eventSession: EventSession
}

type Query {
  eventModelSessionList(eventModelId: ID!): [EventSession!]!
  eventSessionList(filter: EventSessionFilter): [EventSession!]!
  eventSessionDetail(id: ID!): EventSession!
}
input EventSessionFilter {
  OR: [EventSessionFilter!]
  title_contains: String
  intro_contains: String
  description_contains: String
}


type Mutation {
  createEventSession(eventSessionInput: CreateEventSessionInput!): EventSession
  updateEventSession(eventSessionInput: UpdateEventSessionInput!): EventSession
}
input CreateEventSessionInput {
  eventModelId: ID!
  titleSuper: String
  introSuper: String
  descriptionSuper: String
  seatsSuper: Int
  start: DateTime
  end: DateTime
  placeSuperId: ID
  eventCatsSuperIds: [ID!]
}
input UpdateEventSessionInput {
  id: ID!
  titleSuper: String
  introSuper: String
  descriptionSuper: String
  seatsSuper: Int
  start: DateTime
  end: DateTime
  placeSuperId: ID
  eventCatsSuperIds: [ID!]
}

type Subscription {
  EventSession(filter: EventSessionSubscriptionFilter): EventSessionSubscriptionPayload
}
input EventSessionSubscriptionFilter {
  mutation_in: [_ModelMutationType!]
}
type EventSessionSubscriptionPayload {
  mutation: _ModelMutationType!
  node: EventSession
}
