type EventSession {
  id: ID!
  model: EventModel
  title: String
  titleSuper: String
  intro: String
  introSuper: String
  description: String
  descriptionSuper: String
  mainMedia: Media
  medias: [Media!]!
  owner: User!
  start: DateTime
  end: DateTime
  tickets: [EventTicket!]!
  ticketCount: Int
  canTicket: Boolean!
  hasTicket: Boolean!
  seats: Int
  seatsSuper: Int
  published: Boolean!
  place: Place
  placeSuper: Place
  eventCats: [EventCat!]!
  eventCatsSuper: [EventCat!]!
}


type Query {
  eventModelSessionList(eventModelId: ID!): [EventSession!]!
  eventSessionList(filter: EventSessionFilter): [EventSession!]!
  eventSessionDetail(id: ID!): EventSession!
}
input EventSessionFilter {
  OR: [EventSessionFilter!]
  title_contains: String
  intro_contains: String
  description_contains: String
}


type Mutation {
  createEventSession(eventSessionInput: CreateEventSessionInput!): EventSession
  updateEventSession(eventSessionInput: UpdateEventSessionInput!): EventSession
}
input CreateEventSessionInput {
  eventModel: ID!
  title: String
  intro: String
  description: String
  seats: Int
  start: DateTime
  end: DateTime
  placeId: ID
}
input UpdateEventSessionInput {
  id: ID!
  title: String
  intro: String
  description: String
  seats: Int
  start: DateTime
  end: DateTime
  placeId: ID
}

type Subscription {
  EventSession(filter: EventSessionSubscriptionFilter): EventSessionSubscriptionPayload
}
input EventSessionSubscriptionFilter {
  mutation_in: [_ModelMutationType!]
}
type EventSessionSubscriptionPayload {
  mutation: _ModelMutationType!
  node: EventSession
}
